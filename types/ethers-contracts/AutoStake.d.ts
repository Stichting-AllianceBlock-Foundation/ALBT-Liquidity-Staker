/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AutoStakeInterface extends ethers.utils.Interface {
  functions: {
    "exitInfo(address)": FunctionFragment;
    "exitStake()": FunctionFragment;
    "factory()": FunctionFragment;
    "getPendingReward(uint256)": FunctionFragment;
    "lockEndBlock()": FunctionFragment;
    "nextAvailableExitBlock()": FunctionFragment;
    "nextAvailableRoundExitVolume()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPool()": FunctionFragment;
    "share(address)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "throttleRoundBlocks()": FunctionFragment;
    "throttleRoundCap()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalValue()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unit()": FunctionFragment;
    "valuePerShare()": FunctionFragment;
    "setPool(address)": FunctionFragment;
    "refreshAutoStake()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "exit()": FunctionFragment;
    "completeExit()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "exitInfo", values: [string]): string;
  encodeFunctionData(functionFragment: "exitStake", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPendingReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextAvailableExitBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextAvailableRoundExitVolume",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "share", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "throttleRoundBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "throttleRoundCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "valuePerShare",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "refreshAutoStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "exit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "completeExit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;

  decodeFunctionResult(functionFragment: "exitInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAvailableExitBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAvailableRoundExitVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "share", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "throttleRoundBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "throttleRoundCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "valuePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refreshAutoStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;

  events: {
    "ExitCompleted(address,uint256)": EventFragment;
    "ExitRequested(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExitCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
}

export class AutoStake extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AutoStakeInterface;

  functions: {
    exitInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { exitBlock: BigNumber; exitStake: BigNumber }
    >;

    "exitInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { exitBlock: BigNumber; exitStake: BigNumber }
    >;

    exitStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    "exitStake()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    getPendingReward(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPendingReward(uint256)"(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockEndBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextAvailableExitBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextAvailableExitBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextAvailableRoundExitVolume(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nextAvailableRoundExitVolume()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<[string]>;

    "rewardPool()"(overrides?: CallOverrides): Promise<[string]>;

    share(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "share(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    "stakingToken()"(overrides?: CallOverrides): Promise<[string]>;

    throttleRoundBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    "throttleRoundBlocks()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    throttleRoundCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    "throttleRoundCap()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalShares()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "unit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    valuePerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "valuePerShare()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setPool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refreshAutoStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "refreshAutoStake()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeExit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "completeExit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(who: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  exitInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { exitBlock: BigNumber; exitStake: BigNumber }
  >;

  "exitInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { exitBlock: BigNumber; exitStake: BigNumber }
  >;

  exitStake(overrides?: CallOverrides): Promise<BigNumber>;

  "exitStake()"(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  getPendingReward(
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPendingReward(uint256)"(
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "lockEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextAvailableExitBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "nextAvailableExitBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextAvailableRoundExitVolume(overrides?: CallOverrides): Promise<BigNumber>;

  "nextAvailableRoundExitVolume()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPool(overrides?: CallOverrides): Promise<string>;

  "rewardPool()"(overrides?: CallOverrides): Promise<string>;

  share(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "share(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  "stakingToken()"(overrides?: CallOverrides): Promise<string>;

  throttleRoundBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  "throttleRoundBlocks()"(overrides?: CallOverrides): Promise<BigNumber>;

  throttleRoundCap(overrides?: CallOverrides): Promise<BigNumber>;

  "throttleRoundCap()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalValue(overrides?: CallOverrides): Promise<BigNumber>;

  "totalValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unit(overrides?: CallOverrides): Promise<BigNumber>;

  "unit()"(overrides?: CallOverrides): Promise<BigNumber>;

  valuePerShare(overrides?: CallOverrides): Promise<BigNumber>;

  "valuePerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  setPool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPool(address)"(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refreshAutoStake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "refreshAutoStake()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exit()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeExit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "completeExit()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    exitInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { exitBlock: BigNumber; exitStake: BigNumber }
    >;

    "exitInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { exitBlock: BigNumber; exitStake: BigNumber }
    >;

    exitStake(overrides?: CallOverrides): Promise<BigNumber>;

    "exitStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    getPendingReward(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPendingReward(uint256)"(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lockEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextAvailableExitBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "nextAvailableExitBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextAvailableRoundExitVolume(overrides?: CallOverrides): Promise<BigNumber>;

    "nextAvailableRoundExitVolume()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardPool(overrides?: CallOverrides): Promise<string>;

    "rewardPool()"(overrides?: CallOverrides): Promise<string>;

    share(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "share(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    "stakingToken()"(overrides?: CallOverrides): Promise<string>;

    throttleRoundBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    "throttleRoundBlocks()"(overrides?: CallOverrides): Promise<BigNumber>;

    throttleRoundCap(overrides?: CallOverrides): Promise<BigNumber>;

    "throttleRoundCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalValue(overrides?: CallOverrides): Promise<BigNumber>;

    "totalValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unit(overrides?: CallOverrides): Promise<BigNumber>;

    "unit()"(overrides?: CallOverrides): Promise<BigNumber>;

    valuePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "valuePerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    setPool(pool: string, overrides?: CallOverrides): Promise<void>;

    "setPool(address)"(pool: string, overrides?: CallOverrides): Promise<void>;

    refreshAutoStake(overrides?: CallOverrides): Promise<void>;

    "refreshAutoStake()"(overrides?: CallOverrides): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exit(overrides?: CallOverrides): Promise<void>;

    "exit()"(overrides?: CallOverrides): Promise<void>;

    completeExit(overrides?: CallOverrides): Promise<void>;

    "completeExit()"(overrides?: CallOverrides): Promise<void>;

    balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    ExitCompleted(
      user: null,
      stake: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; stake: BigNumber }
    >;

    ExitRequested(
      user: null,
      exitBlock: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; exitBlock: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Staked(
      user: string | null,
      amount: null,
      sharesIssued: null,
      oldShareVaule: null,
      newShareValue: null,
      balanceOf: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        amount: BigNumber;
        sharesIssued: BigNumber;
        oldShareVaule: BigNumber;
        newShareValue: BigNumber;
        balanceOf: BigNumber;
      }
    >;
  };

  estimateGas: {
    exitInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "exitInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitStake(overrides?: CallOverrides): Promise<BigNumber>;

    "exitStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingReward(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPendingReward(uint256)"(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lockEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextAvailableExitBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "nextAvailableExitBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextAvailableRoundExitVolume(overrides?: CallOverrides): Promise<BigNumber>;

    "nextAvailableRoundExitVolume()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    share(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "share(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    throttleRoundBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    "throttleRoundBlocks()"(overrides?: CallOverrides): Promise<BigNumber>;

    throttleRoundCap(overrides?: CallOverrides): Promise<BigNumber>;

    "throttleRoundCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalValue(overrides?: CallOverrides): Promise<BigNumber>;

    "totalValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unit(overrides?: CallOverrides): Promise<BigNumber>;

    "unit()"(overrides?: CallOverrides): Promise<BigNumber>;

    valuePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "valuePerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    setPool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refreshAutoStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "refreshAutoStake()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeExit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "completeExit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exitInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exitInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exitStake()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingReward(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPendingReward(uint256)"(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockEndBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextAvailableExitBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextAvailableExitBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextAvailableRoundExitVolume(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextAvailableRoundExitVolume()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    share(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "share(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    throttleRoundBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "throttleRoundBlocks()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    throttleRoundCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "throttleRoundCap()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalShares()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "unit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    valuePerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "valuePerShare()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPool(address)"(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refreshAutoStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "refreshAutoStake()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeExit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "completeExit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
