/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RewardsPoolInterface extends ethers.utils.Interface {
  functions: {
    "rewardsAmountsArr(uint256)": FunctionFragment;
    "rewardsDistributor()": FunctionFragment;
    "rewardsTokensArr(uint256)": FunctionFragment;
    "rewardsTokensMap(address)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "getRewardsTokensCount()": FunctionFragment;
    "getUserRewardPerTokenRecorded(address,address)": FunctionFragment;
    "getUserReward(address,address)": FunctionFragment;
    "totalStakesAmount()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getRewardForDuration(address)": FunctionFragment;
    "hasPeriodStarted()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "exit()": FunctionFragment;
    "start()": FunctionFragment;
    "addRewards(address,uint256)": FunctionFragment;
    "lastTimeRewardApplicable(address)": FunctionFragment;
    "rewardPerToken(address)": FunctionFragment;
    "earned(address,address)": FunctionFragment;
    "getPeriodsToExtend(address,uint256)": FunctionFragment;
    "hasPeriodFinished()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "getReward()": FunctionFragment;
    "withdrawLPRewards(address,address)": FunctionFragment;
    "withdrawRewards()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "rewardsAmountsArr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsTokensArr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsTokensMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsTokensCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRewardPerTokenRecorded",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakesAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRewardForDuration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPeriodStarted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "exit", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodsToExtend",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPeriodFinished",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawLPRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "rewardsAmountsArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsTokensArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsTokensMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsTokensCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRewardPerTokenRecorded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakesAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPeriodStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodsToExtend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPeriodFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLPRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;

  events: {
    "RewardAdded(address[],uint256[])": EventFragment;
    "RewardExtended(address,uint256,uint256,uint256)": EventFragment;
    "RewardPaid(address,address,uint256)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "WithdrawLPRewards(uint256,address)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLPRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class RewardsPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardsPoolInterface;

  functions: {
    rewardsAmountsArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rewardsAmountsArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsDistributor(overrides?: CallOverrides): Promise<[string]>;

    "rewardsDistributor()"(overrides?: CallOverrides): Promise<[string]>;

    rewardsTokensArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "rewardsTokensArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardsTokensMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardRate: BigNumber;
        latestRewardPerTokenSaved: BigNumber;
        periodFinish: BigNumber;
        lastUpdateTime: BigNumber;
        rewardDuration: BigNumber;
      }
    >;

    "rewardsTokensMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardRate: BigNumber;
        latestRewardPerTokenSaved: BigNumber;
        periodFinish: BigNumber;
        lastUpdateTime: BigNumber;
        rewardDuration: BigNumber;
      }
    >;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    "stakingToken()"(overrides?: CallOverrides): Promise<[string]>;

    getRewardsTokensCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRewardsTokensCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserRewardPerTokenRecorded(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUserRewardPerTokenRecorded(address,address)"(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserReward(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUserReward(address,address)"(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalStakesAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalStakesAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardForDuration(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRewardForDuration(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasPeriodStarted(overrides?: CallOverrides): Promise<[boolean]>;

    "hasPeriodStarted()"(overrides?: CallOverrides): Promise<[boolean]>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "start()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRewards(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addRewards(address,uint256)"(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastTimeRewardApplicable(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastTimeRewardApplicable(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardPerToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rewardPerToken(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    earned(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "earned(address,address)"(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPeriodsToExtend(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { periodToExtend: BigNumber }>;

    "getPeriodsToExtend(address,uint256)"(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { periodToExtend: BigNumber }>;

    hasPeriodFinished(overrides?: CallOverrides): Promise<[boolean]>;

    "hasPeriodFinished()"(overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLPRewards(
      recipient: string,
      lpTokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawLPRewards(address,address)"(
      recipient: string,
      lpTokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  rewardsAmountsArr(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewardsAmountsArr(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsDistributor(overrides?: CallOverrides): Promise<string>;

  "rewardsDistributor()"(overrides?: CallOverrides): Promise<string>;

  rewardsTokensArr(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "rewardsTokensArr(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardsTokensMap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardRate: BigNumber;
      latestRewardPerTokenSaved: BigNumber;
      periodFinish: BigNumber;
      lastUpdateTime: BigNumber;
      rewardDuration: BigNumber;
    }
  >;

  "rewardsTokensMap(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardRate: BigNumber;
      latestRewardPerTokenSaved: BigNumber;
      periodFinish: BigNumber;
      lastUpdateTime: BigNumber;
      rewardDuration: BigNumber;
    }
  >;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  "stakingToken()"(overrides?: CallOverrides): Promise<string>;

  getRewardsTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getRewardsTokensCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getUserRewardPerTokenRecorded(
    rewardToken: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserRewardPerTokenRecorded(address,address)"(
    rewardToken: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserReward(
    rewardToken: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserReward(address,address)"(
    rewardToken: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalStakesAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStakesAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardForDuration(
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRewardForDuration(address)"(
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasPeriodStarted(overrides?: CallOverrides): Promise<boolean>;

  "hasPeriodStarted()"(overrides?: CallOverrides): Promise<boolean>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exit()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "start()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRewards(
    rewardToken: string,
    rewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addRewards(address,uint256)"(
    rewardToken: string,
    rewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastTimeRewardApplicable(
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastTimeRewardApplicable(address)"(
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardPerToken(
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewardPerToken(address)"(
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  earned(
    account: string,
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "earned(address,address)"(
    account: string,
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPeriodsToExtend(
    rewardToken: string,
    rewardAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPeriodsToExtend(address,uint256)"(
    rewardToken: string,
    rewardAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasPeriodFinished(overrides?: CallOverrides): Promise<boolean>;

  "hasPeriodFinished()"(overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getReward()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLPRewards(
    recipient: string,
    lpTokenContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawLPRewards(address,address)"(
    recipient: string,
    lpTokenContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawRewards()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    rewardsAmountsArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardsAmountsArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDistributor(overrides?: CallOverrides): Promise<string>;

    "rewardsDistributor()"(overrides?: CallOverrides): Promise<string>;

    rewardsTokensArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "rewardsTokensArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardsTokensMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardRate: BigNumber;
        latestRewardPerTokenSaved: BigNumber;
        periodFinish: BigNumber;
        lastUpdateTime: BigNumber;
        rewardDuration: BigNumber;
      }
    >;

    "rewardsTokensMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardRate: BigNumber;
        latestRewardPerTokenSaved: BigNumber;
        periodFinish: BigNumber;
        lastUpdateTime: BigNumber;
        rewardDuration: BigNumber;
      }
    >;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    "stakingToken()"(overrides?: CallOverrides): Promise<string>;

    getRewardsTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardsTokensCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRewardPerTokenRecorded(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserRewardPerTokenRecorded(address,address)"(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReward(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserReward(address,address)"(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStakesAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakesAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardForDuration(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardForDuration(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPeriodStarted(overrides?: CallOverrides): Promise<boolean>;

    "hasPeriodStarted()"(overrides?: CallOverrides): Promise<boolean>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exit(overrides?: CallOverrides): Promise<void>;

    "exit()"(overrides?: CallOverrides): Promise<void>;

    start(overrides?: CallOverrides): Promise<void>;

    "start()"(overrides?: CallOverrides): Promise<void>;

    addRewards(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRewards(address,uint256)"(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lastTimeRewardApplicable(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastTimeRewardApplicable(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardPerToken(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earned(address,address)"(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodsToExtend(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPeriodsToExtend(address,uint256)"(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPeriodFinished(overrides?: CallOverrides): Promise<boolean>;

    "hasPeriodFinished()"(overrides?: CallOverrides): Promise<boolean>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getReward(overrides?: CallOverrides): Promise<void>;

    "getReward()"(overrides?: CallOverrides): Promise<void>;

    withdrawLPRewards(
      recipient: string,
      lpTokenContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawLPRewards(address,address)"(
      recipient: string,
      lpTokenContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRewards(overrides?: CallOverrides): Promise<void>;

    "withdrawRewards()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    RewardAdded(
      token: null,
      reward: null
    ): TypedEventFilter<
      [string[], BigNumber[]],
      { token: string[]; reward: BigNumber[] }
    >;

    RewardExtended(
      rewardToken: string | null,
      rewardAmount: null,
      date: null,
      periodToExtend: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        rewardToken: string;
        rewardAmount: BigNumber;
        date: BigNumber;
        periodToExtend: BigNumber;
      }
    >;

    RewardPaid(
      user: string | null,
      rewardToken: string | null,
      rewardAmount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; rewardToken: string; rewardAmount: BigNumber }
    >;

    Staked(
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    WithdrawLPRewards(
      rewardsAmount: BigNumberish | null,
      recipient: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { rewardsAmount: BigNumber; recipient: string }
    >;

    Withdrawn(
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    rewardsAmountsArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardsAmountsArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsDistributor()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsTokensArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardsTokensArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsTokensMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardsTokensMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardsTokensCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRewardPerTokenRecorded(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserRewardPerTokenRecorded(address,address)"(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReward(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserReward(address,address)"(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStakesAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakesAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardForDuration(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardForDuration(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPeriodStarted(overrides?: CallOverrides): Promise<BigNumber>;

    "hasPeriodStarted()"(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "start()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRewards(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addRewards(address,uint256)"(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastTimeRewardApplicable(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastTimeRewardApplicable(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardPerToken(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earned(address,address)"(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodsToExtend(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPeriodsToExtend(address,uint256)"(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPeriodFinished(overrides?: CallOverrides): Promise<BigNumber>;

    "hasPeriodFinished()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLPRewards(
      recipient: string,
      lpTokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawLPRewards(address,address)"(
      recipient: string,
      lpTokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    rewardsAmountsArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardsAmountsArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardsDistributor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsTokensArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardsTokensArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsTokensMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardsTokensMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardsTokensCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardsTokensCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRewardPerTokenRecorded(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserRewardPerTokenRecorded(address,address)"(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReward(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserReward(address,address)"(
      rewardToken: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStakesAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalStakesAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardForDuration(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardForDuration(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPeriodStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasPeriodStarted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "start()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRewards(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addRewards(address,uint256)"(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastTimeRewardApplicable(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardPerToken(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earned(address,address)"(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodsToExtend(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPeriodsToExtend(address,uint256)"(
      rewardToken: string,
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPeriodFinished(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasPeriodFinished()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLPRewards(
      recipient: string,
      lpTokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawLPRewards(address,address)"(
      recipient: string,
      lpTokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
