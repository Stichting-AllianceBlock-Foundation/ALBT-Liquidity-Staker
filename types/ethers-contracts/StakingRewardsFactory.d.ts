/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakingRewardsFactoryInterface extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stakingRewardsByStakingToken(address)": FunctionFragment;
    "stakingRewardsGenesis()": FunctionFragment;
    "stakingTokens(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "deploy(address,address[],uint256[],uint256)": FunctionFragment;
    "extendRewardPeriod(address,address,uint256)": FunctionFragment;
    "startStakings()": FunctionFragment;
    "hasStakingStarted(address)": FunctionFragment;
    "startStaking(address)": FunctionFragment;
    "withdrawLPRewards(address,address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingRewardsByStakingToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingRewardsGenesis",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [string, string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extendRewardPeriod",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startStakings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasStakingStarted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "startStaking",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLPRewards",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingRewardsByStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingRewardsGenesis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendRewardPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startStakings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasStakingStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLPRewards",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class StakingRewardsFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingRewardsFactoryInterface;

  functions: {
    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingRewardsByStakingToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "stakingRewardsByStakingToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stakingRewardsGenesis(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stakingRewardsGenesis()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "stakingTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deploy(
      _stakingToken: string,
      _rewardsTokens: string[],
      _rewardsAmounts: BigNumberish[],
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deploy(address,address[],uint256[],uint256)"(
      _stakingToken: string,
      _rewardsTokens: string[],
      _rewardsAmounts: BigNumberish[],
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendRewardPeriod(
      stakingToken: string,
      extendRewardToken: string,
      extendRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "extendRewardPeriod(address,address,uint256)"(
      stakingToken: string,
      extendRewardToken: string,
      extendRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startStakings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "startStakings()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasStakingStarted(
      stakingRewards: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasStakingStarted(address)"(
      stakingRewards: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    startStaking(
      stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "startStaking(address)"(
      stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLPRewards(
      stakingToken: string,
      recipient: string,
      lpTokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawLPRewards(address,address,address)"(
      stakingToken: string,
      recipient: string,
      lpTokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingRewardsByStakingToken(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "stakingRewardsByStakingToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  stakingRewardsGenesis(overrides?: CallOverrides): Promise<BigNumber>;

  "stakingRewardsGenesis()"(overrides?: CallOverrides): Promise<BigNumber>;

  stakingTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "stakingTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deploy(
    _stakingToken: string,
    _rewardsTokens: string[],
    _rewardsAmounts: BigNumberish[],
    _rewardsDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deploy(address,address[],uint256[],uint256)"(
    _stakingToken: string,
    _rewardsTokens: string[],
    _rewardsAmounts: BigNumberish[],
    _rewardsDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendRewardPeriod(
    stakingToken: string,
    extendRewardToken: string,
    extendRewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "extendRewardPeriod(address,address,uint256)"(
    stakingToken: string,
    extendRewardToken: string,
    extendRewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startStakings(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "startStakings()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasStakingStarted(
    stakingRewards: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasStakingStarted(address)"(
    stakingRewards: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  startStaking(
    stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "startStaking(address)"(
    stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLPRewards(
    stakingToken: string,
    recipient: string,
    lpTokenContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawLPRewards(address,address,address)"(
    stakingToken: string,
    recipient: string,
    lpTokenContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    stakingRewardsByStakingToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "stakingRewardsByStakingToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    stakingRewardsGenesis(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingRewardsGenesis()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "stakingTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deploy(
      _stakingToken: string,
      _rewardsTokens: string[],
      _rewardsAmounts: BigNumberish[],
      _rewardsDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deploy(address,address[],uint256[],uint256)"(
      _stakingToken: string,
      _rewardsTokens: string[],
      _rewardsAmounts: BigNumberish[],
      _rewardsDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    extendRewardPeriod(
      stakingToken: string,
      extendRewardToken: string,
      extendRewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "extendRewardPeriod(address,address,uint256)"(
      stakingToken: string,
      extendRewardToken: string,
      extendRewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startStakings(overrides?: CallOverrides): Promise<void>;

    "startStakings()"(overrides?: CallOverrides): Promise<void>;

    hasStakingStarted(
      stakingRewards: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasStakingStarted(address)"(
      stakingRewards: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    startStaking(
      stakingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "startStaking(address)"(
      stakingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLPRewards(
      stakingToken: string,
      recipient: string,
      lpTokenContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawLPRewards(address,address,address)"(
      stakingToken: string,
      recipient: string,
      lpTokenContract: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingRewardsByStakingToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakingRewardsByStakingToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingRewardsGenesis(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingRewardsGenesis()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakingTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deploy(
      _stakingToken: string,
      _rewardsTokens: string[],
      _rewardsAmounts: BigNumberish[],
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deploy(address,address[],uint256[],uint256)"(
      _stakingToken: string,
      _rewardsTokens: string[],
      _rewardsAmounts: BigNumberish[],
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendRewardPeriod(
      stakingToken: string,
      extendRewardToken: string,
      extendRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "extendRewardPeriod(address,address,uint256)"(
      stakingToken: string,
      extendRewardToken: string,
      extendRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startStakings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "startStakings()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasStakingStarted(
      stakingRewards: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasStakingStarted(address)"(
      stakingRewards: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startStaking(
      stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "startStaking(address)"(
      stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLPRewards(
      stakingToken: string,
      recipient: string,
      lpTokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawLPRewards(address,address,address)"(
      stakingToken: string,
      recipient: string,
      lpTokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingRewardsByStakingToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakingRewardsByStakingToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingRewardsGenesis(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakingRewardsGenesis()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakingTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deploy(
      _stakingToken: string,
      _rewardsTokens: string[],
      _rewardsAmounts: BigNumberish[],
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deploy(address,address[],uint256[],uint256)"(
      _stakingToken: string,
      _rewardsTokens: string[],
      _rewardsAmounts: BigNumberish[],
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendRewardPeriod(
      stakingToken: string,
      extendRewardToken: string,
      extendRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "extendRewardPeriod(address,address,uint256)"(
      stakingToken: string,
      extendRewardToken: string,
      extendRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startStakings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "startStakings()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasStakingStarted(
      stakingRewards: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasStakingStarted(address)"(
      stakingRewards: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startStaking(
      stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "startStaking(address)"(
      stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLPRewards(
      stakingToken: string,
      recipient: string,
      lpTokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawLPRewards(address,address,address)"(
      stakingToken: string,
      recipient: string,
      lpTokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
