/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IStakingRewardsInterface extends ethers.utils.Interface {
  functions: {
    "lastTimeRewardApplicable(address)": FunctionFragment;
    "rewardPerToken(address)": FunctionFragment;
    "earned(address,address)": FunctionFragment;
    "getRewardForDuration(address)": FunctionFragment;
    "totalStakesAmount()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "getReward()": FunctionFragment;
    "exit()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardForDuration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakesAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(functionFragment: "exit", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakesAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;

  events: {};
}

export class IStakingRewards extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IStakingRewardsInterface;

  functions: {
    lastTimeRewardApplicable(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastTimeRewardApplicable(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardPerToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rewardPerToken(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    earned(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "earned(address,address)"(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardForDuration(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRewardForDuration(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalStakesAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalStakesAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  lastTimeRewardApplicable(
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastTimeRewardApplicable(address)"(
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardPerToken(
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewardPerToken(address)"(
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  earned(
    account: string,
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "earned(address,address)"(
    account: string,
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardForDuration(
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRewardForDuration(address)"(
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalStakesAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStakesAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getReward()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exit()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    lastTimeRewardApplicable(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastTimeRewardApplicable(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardPerToken(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earned(address,address)"(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardForDuration(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardForDuration(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStakesAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakesAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getReward(overrides?: CallOverrides): Promise<void>;

    "getReward()"(overrides?: CallOverrides): Promise<void>;

    exit(overrides?: CallOverrides): Promise<void>;

    "exit()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    lastTimeRewardApplicable(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastTimeRewardApplicable(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardPerToken(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earned(address,address)"(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardForDuration(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardForDuration(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStakesAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakesAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lastTimeRewardApplicable(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastTimeRewardApplicable(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardPerToken(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earned(address,address)"(
      account: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardForDuration(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardForDuration(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStakesAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalStakesAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
